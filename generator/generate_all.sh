#!/bin/bash

#set -x

generator_dir=$(dirname "${0}")
generator_dir=$(cd "${generator_dir}"; pwd)

api_dir=$(cd "${generator_dir}"; cd ..; pwd)

out_dir="$(pwd)/opencl_loader"

function process_header() {
  local api_ver="${1}"
  local hdr_in="${2}"
  local hdr_out="${3}"
  local src_out="${4}"

  cat > "${hdr_out}" << EOF
//
// OpenCL-Loader generated replacement header for ${api_ver} ${hdr_in}
// $(date)
//
#pragma once
EOF

  #primary - include the initialize function decl
  "${generator_dir}"/process_header.gawk -v src_out="${src_out}" -vsrc_out_decl="${src_out}.decl" -v hdr_out="${hdr_out}" "${hdr}"

  if [[ "${hdr_in}" == "opencl.h" ]]; then
    cat << EOF >> "${hdr_out}"
#ifdef __cplusplus
extern "C" {
#endif
extern int initialize_${api_ver}();
#ifdef __cplusplus
}
#endif
EOF
  fi # opencl.h
}

function generate_loader() {
  local api_ver="${1}"
  local ver_out_dir="${out_dir}/${api_ver}"
  local src="${ver_out_dir}/src/${api_ver}_loader.c"

  mkdir -p "${ver_out_dir}/src"
  mkdir -p "${ver_out_dir}/include/CL"

  cd "${api_ver}/CL"

  cat > "${src}" << EOF
//
// ${api_ver} wrapper source generated by OpenCL-Loader generator 
// $(date)
//
#include "CL/opencl.h"
#include <dlfcn.h>

int initialize_${api_ver}() {
  void *libopencl = dlopen("libopencl.so", RTLD_NOW | RTLD_LOCAL);
  if (!libopencl) return 0;
EOF

  for hdr in $(echo *.h); do
    #skip all non-standard headers for now
    if [[ ${hdr/d3d/} == ${hdr} && ${hdr/dx/} == ${hdr} ]]; then # && ${hdr/_ext_} == ${hdr} ]]; then
      process_header "${api_ver}" "${hdr}" "${ver_out_dir}/include/CL/${hdr}" "${src}"
    fi
  done

  cat >> "${src}" << EOF
  return 1;
}
EOF

  cat "${src}.decl" >> "${src}"
  rm "${src}.decl"

  cd  "${api_dir}"
}

cd "${api_dir}"
for api_ver in opencl*; do
  if [[ ${api_ver} != "opencl_loader" ]]; then
    echo "Generating Loader for ${api_ver}"
    generate_loader "${api_ver}"
  fi
done